import WebSocket from 'ws'

// –°–æ–∑–¥–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8080
const wss = new WebSocket.Server({ port: 8080 })

console.log('üöÄ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080')

// –•—Ä–∞–Ω–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
const clients = new Map() // ws -> { id, timestamp, userAgent }

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
const generateClientId = () => Math.random().toString(36).substr(2, 9)

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
const broadcastToAll = (message, excludeClient = null) => {
  const messageStr = JSON.stringify(message)
  let sentCount = 0

  clients.forEach((clientInfo, client) => {
    if (client !== excludeClient && client.readyState === WebSocket.OPEN) {
      try {
        client.send(messageStr)
        sentCount++
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É ${clientInfo.id}:`, message.type)
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É ${clientInfo.id}:`, error.message)
      }
    }
  })

  console.log(`üì° Broadcast: ${sentCount} –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ "${message.type}"`)
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
const sendSystemMessage = (type, data = {}) => {
  const systemMessage = {
    type: 'system',
    subtype: type,
    data: data,
    timestamp: Date.now(),
    activeConnections: clients.size,
  }

  broadcastToAll(systemMessage)
  console.log(`üîî –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "${type}":`, data)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
wss.on('connection', (ws, req) => {
  const clientId = generateClientId()
  const clientInfo = {
    id: clientId,
    timestamp: Date.now(),
    userAgent: req.headers['user-agent'] || 'Unknown',
    ip: req.socket.remoteAddress,
  }

  clients.set(ws, clientInfo)

  console.log(`‚úÖ –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${clientId}`)
  console.log(`   IP: ${clientInfo.ip}`)
  console.log(`   User-Agent: ${clientInfo.userAgent}`)
  console.log(`   –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clients.size}`)

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const welcomeMessage = {
    type: 'welcome',
    message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WebSocket —á–∞—Ç!',
    clientId: clientId,
    timestamp: Date.now(),
    totalClients: clients.size,
  }

  ws.send(JSON.stringify(welcomeMessage))

  // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
  const newClientNotification = {
    type: 'client_connected',
    clientId: clientId,
    timestamp: Date.now(),
    totalClients: clients.size,
  }

  broadcastToAll(newClientNotification, ws)

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
  ws.on('message', (data) => {
    try {
      const message = JSON.parse(data)
      console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}:`, message)

      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
      const enrichedMessage = {
        ...message,
        clientId: clientId,
        timestamp: Date.now(),
        serverTimestamp: Date.now(),
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ö–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
      const echoMessage = {
        type: 'echo',
        originalData: message,
        clientId: clientId,
        timestamp: Date.now(),
        serverMessage: '–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º',
      }

      ws.send(JSON.stringify(echoMessage))

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
      const broadcastMessage = {
        type: 'broadcast',
        originalData: message,
        clientId: clientId,
        timestamp: Date.now(),
        serverMessage: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞',
      }

      broadcastToAll(broadcastMessage, ws)
    } catch (error) {
      console.log(`üìù –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}:`, data.toString())

      // –≠—Ö–æ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      const echoMessage = {
        type: 'echo',
        originalData: data.toString(),
        clientId: clientId,
        timestamp: Date.now(),
        serverMessage: '–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º',
      }

      ws.send(JSON.stringify(echoMessage))

      // Broadcast —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      const broadcastMessage = {
        type: 'broadcast',
        originalData: data.toString(),
        clientId: clientId,
        timestamp: Date.now(),
        serverMessage: '–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞',
      }

      broadcastToAll(broadcastMessage, ws)
    }
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
  ws.on('close', (code, reason) => {
    const clientInfo = clients.get(ws)
    clients.delete(ws)

    console.log(`‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${clientInfo?.id}`)
    console.log(`   –ö–æ–¥: ${code}, –ü—Ä–∏—á–∏–Ω–∞: ${reason || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`)
    console.log(`   –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clients.size}`)

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
    if (clientInfo) {
      const disconnectNotification = {
        type: 'client_disconnected',
        clientId: clientInfo.id,
        timestamp: Date.now(),
        totalClients: clients.size,
      }

      broadcastToAll(disconnectNotification)
    }
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  ws.on('error', (error) => {
    const clientInfo = clients.get(ws)
    console.error(`üí• WebSocket –æ—à–∏–±–∫–∞ —É –∫–ª–∏–µ–Ω—Ç–∞ ${clientInfo?.id}:`, error.message)
  })
})

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
setInterval(() => {
  if (clients.size > 0) {
    sendSystemMessage('heartbeat', {
      message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç',
      uptime: process.uptime(),
      memory: process.memoryUsage(),
    })
  }
}, 30000) // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...')

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
  sendSystemMessage('shutdown', { message: '–°–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è' })

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  clients.forEach((clientInfo, client) => {
    if (client.readyState === WebSocket.OPEN) {
      client.close(1000, 'Server shutdown')
    }
  })

  wss.close(() => {
    console.log('‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    process.exit(0)
  })
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
})

process.on('unhandledRejection', (reason, promise) => {
  console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason)
})
